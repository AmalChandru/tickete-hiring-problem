generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FetchJob {
  id           Int       @id @default(autoincrement())
  productId    Int
  fetchPeriod  Int       // 0 = daily, 1 = 4-hours, 2 = 15-mins
  status       Int       // 0 = pending, 1 = in-progress, 2 = completed, 3 = failed
  lastRun      DateTime? 
  nextRun      DateTime? 
  createdAt    DateTime  @default(now())
}

model FetchStatus {
  id                 Int     @id @default(autoincrement())
  productId          Int     @unique
  isFetchingEnabled  Boolean @default(true)
}

model Slot {
  id              Int       @id @default(autoincrement())
  providerSlotId  String    
  productId       Int
  variantId       Int
  startDate       String
  startTime       String
  endTime         String
  remaining       Int
  currencyCode    String

  paxAvailability PaxAvailability[] // Relation to PaxAvailability table

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
}

model PaxCategory {
  id          String @id // Changed from Int to String (e.g., "ADULT_12~99")
  name        String
  description String

  paxAvailability PaxAvailability[] // Relation to PaxAvailability
}

model Price {
  id            Int     @id @default(autoincrement())
  finalPrice    Float
  originalPrice Float
  discount      Float
  currencyCode  String

  paxAvailability PaxAvailability[] // Relation to PaxAvailability
}

model PaxAvailability {
  id            Int        @id @default(autoincrement())
  slotId        Int        @unique
  paxCategoryId String     // Changed to String to match PaxCategory.id
  priceId       Int        // Links to Price
  max           Int
  min           Int
  remaining     Int
  isPrimary     Boolean?   @default(false)

  slot          Slot        @relation(fields: [slotId], references: [id], onDelete: Cascade)
  paxCategory   PaxCategory @relation(fields: [paxCategoryId], references: [id], onDelete: Cascade)
  price         Price       @relation(fields: [priceId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
}
